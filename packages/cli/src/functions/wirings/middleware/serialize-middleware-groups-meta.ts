import type { InspectorState } from '@pikku/inspector'

/**
 * Generates the middleware groups metadata file that stores metadata about
 * tag-based and HTTP middleware groups for visualization and inspection.
 *
 * This includes services, middleware count, factory status, etc.
 */
export const serializeMiddlewareGroupsMeta = (state: InspectorState) => {
  const lines: string[] = [
    `/**`,
    ` * This file was generated by the @pikku/cli`,
    ` */`,
    `import { pikkuState } from '@pikku/core'`,
    ``,
  ]

  // Serialize HTTP middleware groups metadata
  const httpGroups: Record<string, any> = {}
  for (const [pattern, meta] of state.http.routeMiddleware.entries()) {
    httpGroups[pattern] = {
      exportName: meta.exportName,
      sourceFile: meta.sourceFile,
      position: meta.position,
      services: meta.services,
      middlewareCount: meta.middlewareCount,
      isFactory: meta.isFactory,
    }
  }

  if (Object.keys(httpGroups).length > 0) {
    lines.push(`// HTTP middleware groups metadata`)
    lines.push(
      `pikkuState('middleware', 'httpGroupMeta', ${JSON.stringify(httpGroups, null, 2)})`
    )
    lines.push(``)
  }

  // Serialize tag middleware groups metadata
  const tagGroups: Record<string, any> = {}
  for (const [tag, meta] of state.middleware.tagMiddleware.entries()) {
    tagGroups[tag] = {
      exportName: meta.exportName,
      sourceFile: meta.sourceFile,
      position: meta.position,
      services: meta.services,
      middlewareCount: meta.middlewareCount,
      isFactory: meta.isFactory,
    }
  }

  if (Object.keys(tagGroups).length > 0) {
    lines.push(`// Tag middleware groups metadata`)
    lines.push(
      `pikkuState('middleware', 'tagGroupMeta', ${JSON.stringify(tagGroups, null, 2)})`
    )
    lines.push(``)
  }

  return lines.join('\n')
}
