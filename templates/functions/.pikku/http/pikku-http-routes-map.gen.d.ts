/**
 * This file was generated by the @pikku/cli
 */
/**
 * This provides the structure needed for typescript to be aware of routes and their return types
 */

import type { __object } from '../../src/mcp.functions.js'

// Custom types are those that are defined directly within generics
// or are broken into simpler types
export type OnConnectInput = 'hello!'
export type AuthenticateInput = { token: string; userId: string }
export type AuthenticateOutput = { authResult: boolean; action: 'auth' }
export type SubscribeInput = { name: string }
export type UnsubscribeInput = { name: string }
export type EmitMessageInput = { name: string }
export type EmitMessageOutput =
  | { timestamp: string; from: string }
  | { message: string }
export type OnMessageInput = 'hello'
export type OnMessageOutput = 'hey'
export type ProgressiveEnhancementExampleOutput = {
  state: 'initial' | 'pending' | 'done'
}
export type TimeSinceOpenedOutput = { count: number }
export type SayHelloInput = { name?: string }
export type SayHelloOutput = { message: string; timestamp: number }
export type CalculateInput = {
  operation: 'add' | 'subtract' | 'multiply' | 'divide'
  a: number
  b: number
}
export type CalculateOutput = { result: number; operation: string }
export type GetStaticResourceOutput = { message: string }
export type GetUserInfoInput = { userId: string }
export type GetUserInfoOutput = {
  userId: string
  name: string
  email: string
  lastLogin: string
}
export type PikkuFn_src_mcp_functions_ts_L113C66Output = {
  role: 'user'
  content: { type: 'text'; text: string }
}[]
export type DynamicPromptGeneratorInput = {
  topic: string
  complexity: 'beginner' | 'intermediate' | 'advanced'
  includeExamples?: boolean
}
export type PikkuFn_src_mcp_functions_ts_L133C4Output = {
  role: 'user'
  content: { type: 'text'; text: string }
}[]
export type QueueWorkerInput = { message: string; fail: boolean }
export type QueueWorkerOutput = { result: string }
export type RpcTestInput = { in: number }

// The '& {}' is a workaround for not directly refering to a type since it confuses typescript
export type RpcTestInputBody = RpcTestInput & {}

interface RouteHandler<I, O> {
  input: I
  output: O
}

export type RoutesMap = {
  readonly '/status/sse': {
    readonly GET: RouteHandler<null, ProgressiveEnhancementExampleOutput>
  }
  readonly '/status/http': {
    readonly GET: RouteHandler<null, ProgressiveEnhancementExampleOutput>
  }
  readonly '/sse': {
    readonly GET: RouteHandler<null, TimeSinceOpenedOutput>
  }
  readonly '/hello-world': {
    readonly GET: RouteHandler<null, string>
  }
  readonly '/rpc': {
    readonly GET: RouteHandler<null, null>
  }
  readonly '/dummy': {
    readonly GET: RouteHandler<RpcTestInput, null>
  }
}

export type RouteHandlerOf<
  Route extends keyof RoutesMap,
  Method extends keyof RoutesMap[Route],
> = RoutesMap[Route][Method] extends { input: infer I; output: infer O }
  ? RouteHandler<I, O>
  : never

export type RoutesWithMethod<Method extends string> = {
  [Route in keyof RoutesMap]: Method extends keyof RoutesMap[Route]
    ? Route
    : never
}[keyof RoutesMap]
