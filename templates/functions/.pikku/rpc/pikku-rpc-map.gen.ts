/**
 * This file was generated by the @pikku/cli
 */
/**
 * This provides the structure needed for typescript to be aware of RPCs and their return types
 */

// Custom types are those that are defined directly within generics
// or are broken into simpler types
export type OnConnectInput = 'hello!'
export type AuthenticateInput = { token: string; userId: string }
export type AuthenticateOutput = { authResult: boolean; action: 'auth' }
export type SubscribeInput = { name: string }
export type UnsubscribeInput = { name: string }
export type EmitMessageInput = { name: string }
export type EmitMessageOutput =
  | { timestamp: string; from: string }
  | { message: string }
export type OnMessageInput = 'hello'
export type OnMessageOutput = 'hey'
export type ProgressiveEnhancementExampleOutput = {
  state: 'initial' | 'pending' | 'done'
}
export type TimeSinceOpenedOutput = { count: number }
export type SayHelloInput = { name?: string }
export type SayHelloOutput = { message: string; timestamp: number }
export type CalculateInput = {
  operation: 'add' | 'subtract' | 'multiply' | 'divide'
  a: number
  b: number
}
export type CalculateOutput = { result: number; operation: string }
export type GetStaticResourceOutput = { message: string }
export type GetUserInfoInput = { userId: string }
export type GetUserInfoOutput = {
  userId: string
  name: string
  email: string
  lastLogin: string
}
export type PikkuFn_src_mcp_functions_ts_L113C66Output = {
  role: 'user'
  content: { type: 'text'; text: string }
}[]
export type DynamicPromptGeneratorInput = {
  topic: string
  complexity: 'beginner' | 'intermediate' | 'advanced'
  includeExamples?: boolean
}
export type PikkuFn_src_mcp_functions_ts_L133C4Output = {
  role: 'user'
  content: { type: 'text'; text: string }
}[]
export type QueueWorkerInput = { message: string; fail: boolean }
export type QueueWorkerOutput = { result: string }
export type RpcTestInput = { in: number }

interface RPCHandler<I, O> {
  input: I
  output: O
}

export type RPCMap = {
  readonly onConnect: RPCHandler<OnConnectInput, null>
  readonly onDisconnect: RPCHandler<null, null>
  readonly authenticate: RPCHandler<AuthenticateInput, AuthenticateOutput>
  readonly subscribe: RPCHandler<SubscribeInput, null>
  readonly unsubscribe: RPCHandler<UnsubscribeInput, null>
  readonly emitMessage: RPCHandler<EmitMessageInput, EmitMessageOutput>
  readonly onMessage: RPCHandler<OnMessageInput, OnMessageOutput>
  readonly progressiveEnhancementExample: RPCHandler<
    null,
    ProgressiveEnhancementExampleOutput
  >
  readonly timeSinceOpened: RPCHandler<null, TimeSinceOpenedOutput>
  readonly helloWorld: RPCHandler<null, string>
  readonly sayHello: RPCHandler<SayHelloInput, SayHelloOutput>
  readonly calculate: RPCHandler<CalculateInput, CalculateOutput>
  readonly getStaticResource: RPCHandler<null, GetStaticResourceOutput>
  readonly getUserInfo: RPCHandler<GetUserInfoInput, GetUserInfoOutput>
  readonly staticPromptGenerator: RPCHandler<
    null,
    PikkuFn_src_mcp_functions_ts_L113C66Output
  >
  readonly dynamicPromptGenerator: RPCHandler<
    DynamicPromptGeneratorInput,
    PikkuFn_src_mcp_functions_ts_L133C4Output
  >
  readonly queueWorker: RPCHandler<QueueWorkerInput, QueueWorkerOutput>
  readonly rpcTest: RPCHandler<RpcTestInput, null>
  readonly rpcCaller: RPCHandler<null, null>
  readonly myScheduledTask: RPCHandler<null, null>
}

type RPCInvoke = <Name extends keyof RPCMap>(
  name: Name,
  data: RPCMap[Name]['input'],
  options?: {
    location?: 'local' | 'remote' | 'auto'
  }
) => Promise<RPCMap[Name]['output']>

export type TypedPikkuRPC = {
  depth: number
  global: boolean
  invoke: RPCInvoke
}
