/**
 * This file was generated by the @pikku/cli
 */
/**
 * This is used to provide the application types in the typescript project
 */

import { CoreAPIPermission, PikkuMiddleware } from '@pikku/core'
import {
  CoreAPIFunction,
  CoreAPIFunctionSessionless,
} from '@pikku/core/function'
import {
  CoreHTTPFunctionRoute,
  AssertRouteParams,
  addHTTPRoute as addCoreHTTPRoute,
} from '@pikku/core/http'
import {
  CoreScheduledTask,
  addScheduledTask as addCoreScheduledTask,
} from '@pikku/core/scheduler'
import {
  CoreAPIChannel,
  PikkuChannel,
  addChannel as addCoreChannel,
} from '@pikku/core/channel'
import {
  CoreQueueWorker,
  addQueueWorker as addCoreQueueWorker,
} from '@pikku/core/queue'
import {
  CoreMCPResource,
  CoreMCPTool,
  CoreMCPPrompt,
  addMCPResource as addCoreMCPResource,
  addMCPTool as addCoreMCPTool,
  addMCPPrompt as addCoreMCPPrompt,
  MCPResourceResponse,
  MCPToolResponse,
  MCPPromptResponse,
  PikkuMCP,
} from '@pikku/core'

import type { UserSession } from '../types/application-types.d.js'
import type { SingletonServices } from '../types/application-types.d.js'
import type { Services } from '../types/application-types.d.js'
import type { TypedPikkuRPC } from './rpc/pikku-rpc-map.gen.js'

export type APIPermission<
  In = unknown,
  RequiredServices extends SingletonServices = SingletonServices,
> = CoreAPIPermission<In, RequiredServices, UserSession>
export type APIMiddleware<
  RequiredServices extends SingletonServices = SingletonServices,
> = PikkuMiddleware<RequiredServices, UserSession>

type APIFunctionSessionless<
  In = unknown,
  Out = never,
  ChannelData = null, // null means optional channel
  MCPData = null, // null means optional MCP
  RequiredServices extends Services = Services & { rpc: TypedPikkuRPC } & ([
      ChannelData,
    ] extends [null]
      ? { channel?: PikkuChannel<unknown, Out> } // Optional channel
      : { channel: PikkuChannel<ChannelData, Out> }) & // Required channel with any data type
    ([MCPData] extends [null]
      ? { mcp?: PikkuMCP } // Optional MCP
      : { mcp: PikkuMCP }), // Required MCP
> = CoreAPIFunctionSessionless<
  In,
  Out,
  ChannelData,
  RequiredServices,
  UserSession
>

type APIFunction<
  In = unknown,
  Out = never,
  ChannelData = null, // null means optional channel
  MCPData = null, // null means optional MCP
  RequiredServices extends Services = Services & { rpc: TypedPikkuRPC } & ([
      ChannelData,
    ] extends [null]
      ? { channel?: PikkuChannel<unknown, Out> } // Optional channel
      : { channel: PikkuChannel<ChannelData, Out> }) & // Required channel with any data type
    ([MCPData] extends [null]
      ? { mcp?: PikkuMCP } // Optional MCP
      : { mcp: PikkuMCP }), // Required MCP
> = CoreAPIFunction<In, Out, ChannelData, RequiredServices, UserSession>

type APIRoute<In, Out, Route extends string> = CoreHTTPFunctionRoute<
  In,
  Out,
  Route,
  APIFunction<In, Out>,
  APIFunctionSessionless<In, Out>,
  APIPermission<In>,
  APIMiddleware
>
type APIChannel<ChannelData, Channel extends string> = CoreAPIChannel<
  ChannelData,
  Channel,
  APIFunction<void, unknown> | APIFunction<void, unknown, ChannelData>,
  APIFunction<void, void> | APIFunction<void, void, ChannelData>,
  APIFunction<any, any> | APIFunction<any, any, ChannelData>,
  APIPermission
>
type ScheduledTask = CoreScheduledTask<
  APIFunctionSessionless<void, void>,
  UserSession
>
type QueueWorker<In, Out> = CoreQueueWorker<APIFunctionSessionless<In, Out>>

type MCPResource<In> = CoreMCPResource<
  APIFunctionSessionless<In, MCPResourceResponse, null, true>
>
type MCPTool<In> = CoreMCPTool<
  APIFunctionSessionless<In, MCPToolResponse, null, true>
>
type MCPPrompt<In> = CoreMCPPrompt<
  APIFunctionSessionless<In, MCPPromptResponse, null, true>
>

export const pikkuFunc = <In, Out = unknown>(
  func:
    | APIFunction<In, Out>
    | {
        func: APIFunction<In, Out>
        auth?: true
        name?: string
      }
    | {
        func: APIFunctionSessionless<In, Out>
        auth: false
        name?: string
      }
) => {
  return typeof func === 'function' ? func : func.func
}

export const pikkuSessionlessFunc = <In, Out = unknown>(
  func:
    | APIFunctionSessionless<In, Out>
    | {
        func: APIFunctionSessionless<In, Out>
        name?: string
      }
) => {
  return typeof func === 'function' ? func : func.func
}

export const pikkuChannelConnectionFunc = <
  Out = unknown,
  ChannelData = unknown,
>(
  func:
    | APIFunctionSessionless<void, Out, ChannelData>
    | {
        func: APIFunctionSessionless<void, Out, ChannelData>
        name?: string
      }
) => {
  return typeof func === 'function' ? func : func.func
}

export const pikkuChannelDisconnectionFunc = <ChannelData = unknown>(
  func:
    | APIFunctionSessionless<void, void, ChannelData>
    | {
        func: APIFunction<void, void, ChannelData>
        name?: string
      }
) => {
  return typeof func === 'function' ? func : func.func
}

export const pikkuChannelFunc = <
  In = unknown,
  Out = unknown,
  ChannelData = unknown,
>(
  func:
    | APIFunctionSessionless<In, Out, ChannelData>
    | {
        func: APIFunctionSessionless<In, Out, ChannelData>
        name?: string
      }
) => {
  return typeof func === 'function' ? func : func.func
}

export const pikkuVoidFunc = (
  func:
    | APIFunctionSessionless<void, void>
    | {
        func: APIFunctionSessionless<void, void>
        name?: string
      }
) => {
  return typeof func === 'function' ? func : func.func
}

export const addChannel = <ChannelData, Channel extends string>(
  channel: APIChannel<ChannelData, Channel> &
    AssertRouteParams<ChannelData, Channel>
) => {
  addCoreChannel(channel as any) // TODO
}

export const addHTTPRoute = <In, Out, Route extends string>(
  route: APIRoute<In, Out, Route> & AssertRouteParams<In, Route>
) => {
  addCoreHTTPRoute(route)
}

export const addScheduledTask = (task: ScheduledTask) => {
  addCoreScheduledTask(task as any) // TODO
}

export const addQueueWorker = (queueWorker: QueueWorker<any, any>) => {
  addCoreQueueWorker(queueWorker as any) // TODO
}

export const addMCPResource = <In>(mcpResource: MCPResource<In>) => {
  addCoreMCPResource(mcpResource as any)
}

export const addMCPTool = <In>(mcpTool: MCPTool<In>) => {
  addCoreMCPTool(mcpTool as any)
}

export const addMCPPrompt = <In>(mcpPrompt: MCPPrompt<In>) => {
  addCoreMCPPrompt(mcpPrompt as any)
}

export const pikkuMCPPromptFunc = <In>(
  func:
    | APIFunctionSessionless<In, MCPPromptResponse>
    | {
        func: APIFunctionSessionless<In, MCPPromptResponse>
        name?: string
      }
) => {
  return typeof func === 'function' ? func : func.func
}

export const pikkuMCPToolFunc = <In>(
  func:
    | APIFunctionSessionless<In, MCPToolResponse, null, true>
    | {
        func: APIFunctionSessionless<In, MCPToolResponse, null, true>
        name?: string
      }
) => {
  return typeof func === 'function' ? func : func.func
}

export const pikkuMCPResourceFunc = <In>(
  func:
    | APIFunctionSessionless<In, MCPResourceResponse, null, true>
    | {
        func: APIFunctionSessionless<In, MCPResourceResponse, null, true>
        name?: string
      }
) => {
  return typeof func === 'function' ? func : func.func
}
