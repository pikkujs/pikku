'server-only'

/**
 * This file was generated by the @pikku/cli
 */

/**
 * This file provides a wrapper around the PikkuNextJS class to allow for methods to be type checked against your routes.
 * This ensures type safety for route handling methods when integrating with the `@pikku/core` framework.
 */
import { PikkuNextJS } from '@pikku/next'
import type {
  RoutesMap,
  RouteHandlerOf,
} from '../functions/.pikku/pikku-routes-map.gen.d.js'

import { createConfig as createConfig } from '../functions/src/services.js'
import { createSingletonServices as createSingletonServices } from '../functions/src/services.js'
import { createSessionServices as createSessionServices } from '../functions/src/services.js'

import './backend/.pikku/pikku-routes.js'
import './backend/.pikku/pikku-schemas/register.js'

let _pikku: PikkuNextJS | undefined

/**
 * Initializes and returns an instance of PikkuNextJS with helper methods for handling route requests.
 *
 * @returns An object containing methods for making action requests, SSR requests, and API requests.
 */
export const pikku = () => {
  if (!_pikku) {
    _pikku = new PikkuNextJS(
      createConfig as any,
      createSingletonServices as any,
      createSessionServices
    )
  }

  /**
   * Makes an action request for a specified route and method.
   *
   * @template Route - The route key from the RoutesMap.
   * @template Method - The method key from the specified route.
   * @param route - The route to make the request to.
   * @param method - The method to be used for the request.
   * @param data - The input data for the request.
   * @returns A promise that resolves to the output of the route handler.
   */
  const actionRequest = async <
    Route extends keyof RoutesMap,
    Method extends keyof RoutesMap[Route],
  >(
    route: Route,
    method: Method,
    data: RouteHandlerOf<Route, Method>['input']
  ): Promise<RouteHandlerOf<Route, Method>['output']> => {
    return _pikku!.actionRequest(route, method, data as any)
  }

  /**
   * Makes a static action request for a specified route and method.
   *
   * @template Route - The route key from the RoutesMap.
   * @template Method - The method key from the specified route.
   * @param route - The route to make the request to.
   * @param method - The method to be used for the request.
   * @param data - The input data for the request.
   * @returns A promise that resolves to the output of the route handler.
   */
  const staticActionRequest = async <
    Route extends keyof RoutesMap,
    Method extends keyof RoutesMap[Route],
  >(
    route: Route,
    method: Method,
    data: RouteHandlerOf<Route, Method>['input']
  ): Promise<RouteHandlerOf<Route, Method>['output']> => {
    return _pikku!.staticActionRequest(route, method, data as any)
  }

  return {
    staticActionRequest,
    actionRequest,
  }
}
