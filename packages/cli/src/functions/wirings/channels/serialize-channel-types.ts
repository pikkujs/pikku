/**
 * Generates type definitions for WebSocket channel wirings
 */
export const serializeChannelTypes = (functionTypesImportPath: string) => {
  return `/**
 * This file was generated by the @pikku/cli
 * Channel-specific type definitions for tree-shaking optimization
 */

import { CoreChannel, wireChannel as wireChannelCore } from '@pikku/core/channel'
import { CorePikkuFunctionConfig } from '@pikku/core'
import { AssertHTTPWiringParams } from '@pikku/core/http'
import type { PikkuFunction, PikkuFunctionSessionless, PikkuPermission, PikkuMiddleware } from '${functionTypesImportPath}'

/**
 * Type definition for WebSocket channels with typed data exchange.
 * Supports connection, disconnection, and message handling.
 *
 * @template ChannelData - Type of data exchanged through the channel
 * @template Channel - String literal type for the channel name
 */
type ChannelWiringFunction<I, O, C = {}> = PikkuFunctionSessionless<I, O, C> | PikkuFunction<I, O, C>
type ChannelWiring<ChannelData, Channel extends string> = CoreChannel<ChannelData, Channel, ChannelWiringFunction<void, unknown> | ChannelWiringFunction<void, unknown, ChannelData>, ChannelWiringFunction<void, void> | ChannelWiringFunction<void, void, ChannelData>, ChannelWiringFunction<any, any> | ChannelWiringFunction<any, any, ChannelData>, PikkuPermission, PikkuMiddleware>

/**
 * Creates a function that handles WebSocket channel connections.
 * Called when a client connects to a channel.
 *
 * @template Out - Output type for connection response
 * @template ChannelData - Type of data associated with the channel
 * @param func - Function definition, either direct function or configuration object
 * @returns The unwrapped function for internal use
 */
export const pikkuChannelConnectionFunc = <Out = unknown, ChannelData = unknown>(
  func:
    | PikkuFunctionSessionless<void, Out, ChannelData>
    | {
        func: PikkuFunctionSessionless<void, Out, ChannelData>
        name?: string
      }
) => {
  return typeof func === 'function' ? func : func.func
}

/**
 * Creates a function that handles WebSocket channel disconnections.
 * Called when a client disconnects from a channel.
 *
 * @template ChannelData - Type of data associated with the channel
 * @param func - Function definition, either direct function or configuration object
 * @returns The unwrapped function for internal use
 */
export const pikkuChannelDisconnectionFunc = <ChannelData = unknown>(
  func:
    | PikkuFunctionSessionless<void, void, ChannelData>
    | {
        func: PikkuFunction<void, void, ChannelData>
        name?: string
      }
) => {
  return typeof func === 'function' ? func : func.func
}

/**
 * Creates a function that handles WebSocket channel messages.
 * Called when a message is received on a channel.
 *
 * @template In - Input type for channel messages
 * @template Out - Output type for channel responses
 * @template ChannelData - Type of data associated with the channel
 * @param func - Function definition, either direct function or configuration object
 * @returns The unwrapped function for internal use
 */
export const pikkuChannelFunc = <In = unknown, Out = unknown, ChannelData = unknown>(
  func:
    | PikkuFunctionSessionless<In, Out, ChannelData>
    | CorePikkuFunctionConfig<PikkuFunction<In, Out, ChannelData>, PikkuPermission<In>>
) => {
  return typeof func === 'function' ? func : func.func
}

/**
 * Registers a WebSocket channel with the Pikku framework.
 *
 * @template ChannelData - Type of data associated with the channel
 * @template Channel - String literal type for the channel name
 * @param channel - Channel definition with connection, disconnection, and message handlers
 */
export const wireChannel = <ChannelData, Channel extends string>(
  channel: ChannelWiring<ChannelData, Channel> & AssertHTTPWiringParams<ChannelData, Channel>
) => {
  wireChannelCore(channel as any) // TODO
}
`
}
