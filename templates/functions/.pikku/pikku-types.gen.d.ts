/**
 * This file was generated by the @pikku/cli
 */
/**
 * This is used to provide the application types in the typescript project
 */

import {
  CoreAPIFunction,
  CoreAPIFunctionSessionless,
  CoreAPIPermission,
  MakeRequired,
} from '@pikku/core'
import { CoreHTTPFunctionRoute, AssertRouteParams } from '@pikku/core/http'
import { CoreScheduledTask } from '@pikku/core/scheduler'
import {
  CoreAPIChannel,
  CoreChannelConnection,
  CoreChannelDisconnection,
  CoreChannelMessage,
  PikkuChannel,
} from '@pikku/core/channel'

import type { UserSession } from '../types/application-types.d.js'
import type { Services } from '../types/application-types.d.js'

export type APIPermission<
  In = unknown,
  RequiredServices = Services,
> = CoreAPIPermission<In, RequiredServices, UserSession>

export type APIFunctionSessionless<
  In = unknown,
  Out = never,
  RequiredServices = Services,
> = CoreAPIFunctionSessionless<In, Out, RequiredServices, UserSession>
export type APIFunction<
  In = unknown,
  Out = never,
  RequiredServices = Services,
> = CoreAPIFunction<In, Out, RequiredServices, UserSession>
type APIRoute<In, Out, Route extends string> = CoreHTTPFunctionRoute<
  In,
  Out,
  Route,
  APIFunction<In, Out>,
  APIFunctionSessionless<In, Out>,
  APIPermission<In>
>

export type ChannelConnection<
  Out = never,
  ChannelData = unknown,
  RequiredServices extends Services = Services,
> = (
  services: MakeRequired<Services, 'eventHub'>,
  channel: PikkuChannel<UserSession, ChannelData, Out>
) => Promise<void>
export type ChannelDisconnection<
  ChannelData = unknown,
  RequiredServices extends Services = Services,
> = (
  services: MakeRequired<Services, 'eventHub'>,
  channel: PikkuChannel<UserSession, ChannelData, never>
) => Promise<void>
export type ChannelMessage<
  In,
  Out = never,
  ChannelData = unknown,
  RequiredServices extends Services = Services,
> = (
  services: MakeRequired<Services, 'eventHub'>,
  channel: PikkuChannel<UserSession, ChannelData, Out>,
  data: In
) => Promise<Out | void>
type APIChannel<
  ChannelData,
  Channel extends string,
  In extends unknown = never,
  Out extends unknown = never,
> = CoreAPIChannel<
  ChannelData,
  Channel,
  ChannelConnection,
  ChannelDisconnection,
  ChannelMessage<In, Out, ChannelData>
>

type ScheduledTask = CoreScheduledTask<
  APIFunctionSessionless<void, void>,
  UserSession
>

declare module '@pikku/core' {
  // type APIPermission<In = unknown, RequiredServices = Services> = CoreAPIPermission<In, RequiredServices, UserSession>
  // type APIFunction = <In = unknown, Out = never, RequiredServices = Services> = CoreAPIFunction<In, Out, RequiredServices, UserSession>
  // type APIFunctionSessionless = <In = unknown, Out = never, RequiredServices = Services> = CoreAPIFunctionSessionless<In, Out, RequiredServices, UserSession>

  function addChannel<ChannelData, Channel extends string>(
    channel: APIChannel<ChannelData, Channel> &
      AssertRouteParams<ChannelData, Channel>
  ): void

  function addRoute<In, Out, Route extends string>(
    route: APIRoute<In, Out, Route> & AssertRouteParams<In, Route>
  ): void

  function addScheduledTask(task: ScheduledTask): void
}
