/**
 * Generates type definitions for MCP wirings
 */
export const serializeMCPTypes = (functionTypesImportPath: string) => {
  return `/**
 * This file was generated by the @pikku/cli
 * MCP-specific type definitions for tree-shaking optimization
 */

import {
  CoreMCPResource,
  CoreMCPTool,
  CoreMCPPrompt,
  wireMCPResource as wireMCPResourceCore,
  wireMCPTool as wireMCPToolCore,
  wireMCPPrompt as wireMCPPromptCore,
  MCPResourceResponse,
  MCPToolResponse,
  MCPPromptResponse
} from '@pikku/core'

import type { PikkuFunctionConfig, PikkuFunctionSessionless } from '${functionTypesImportPath}'

/**
 * Type definition for MCP resources that provide data to AI models.
 *
 * @template In - Input type for the resource request
 */
type MCPResourceWiring<In> = CoreMCPResource<PikkuFunctionConfig<In, MCPResourceResponse>>

/**
 * Type definition for MCP tools that AI models can invoke.
 *
 * @template In - Input type for the tool invocation
 */
type MCPToolWiring<In> = CoreMCPTool<PikkuFunctionConfig<In, MCPToolResponse>>

/**
 * Type definition for MCP prompts that provide templates to AI models.
 *
 * @template In - Input type for the prompt parameters
 */
type MCPPromptWiring<In> = CoreMCPPrompt<PikkuFunctionConfig<In, MCPPromptResponse>>

/**
 * Registers an MCP resource with the Pikku framework.
 * Resources provide data that AI models can access.
 *
 * @template In - Input type for the resource request
 * @param mcpResource - MCP resource definition with data provider function
 */
export const wireMCPResource = <In>(
  mcpResource: MCPResourceWiring<In>
) => {
  wireMCPResourceCore(mcpResource as any)
}

/**
 * Registers an MCP tool with the Pikku framework.
 * Tools are functions that AI models can invoke.
 *
 * @template In - Input type for the tool invocation
 * @param mcpTool - MCP tool definition with action function
 */
export const wireMCPTool = <In>(
  mcpTool: MCPToolWiring<In>
) => {
  wireMCPToolCore(mcpTool as any)
}

/**
 * Registers an MCP prompt with the Pikku framework.
 * Prompts provide templates that AI models can use.
 *
 * @template In - Input type for the prompt parameters
 * @param mcpPrompt - MCP prompt definition with template function
 */
export const wireMCPPrompt = <In>(
  mcpPrompt: MCPPromptWiring<In>
) => {
  wireMCPPromptCore(mcpPrompt as any)
}

/**
 * Creates a function for handling MCP prompt requests.
 * These functions generate prompt templates for AI models.
 *
 * @template In - Input type for the prompt parameters
 * @param func - Function definition, either direct function or configuration object
 * @returns The unwrapped function for internal use
 */
export const pikkuMCPPromptFunc = <In>(
  func:
    | PikkuFunctionSessionless<In, MCPPromptResponse>
    | {
        func: PikkuFunctionSessionless<In, MCPPromptResponse>
        name?: string
      }
): PikkuFunctionConfig<In, MCPPromptResponse> => {
  return typeof func === 'function' ? { func } : func
}

/**
 * Creates a function for handling MCP tool invocations.
 * These functions perform actions that AI models can request.
 *
 * @template In - Input type for the tool invocation
 * @param func - Function definition, either direct function or configuration object
 * @returns The unwrapped function for internal use
 */
export const pikkuMCPToolFunc = <In>(
  func:
    | PikkuFunctionSessionless<In, MCPToolResponse, null, true>
    | {
      func: PikkuFunctionSessionless<In, MCPToolResponse, null, true>
      name?: string
    }
): PikkuFunctionConfig<In, MCPToolResponse> => {
  return typeof func === 'function' ? { func } : func
}

/**
 * Creates a function for handling MCP resource requests.
 * These functions provide data that AI models can access.
 *
 * @template In - Input type for the resource request
 * @param func - Function definition, either direct function or configuration object
 * @returns The unwrapped function for internal use
 */
export const pikkuMCPResourceFunc = <In>(
  func:
    | PikkuFunctionSessionless<In, MCPResourceResponse, null, true>
    | {
      func: PikkuFunctionSessionless<In, MCPResourceResponse, null, true>
      name?: string
    }
): PikkuFunctionConfig<In, MCPResourceResponse> => {
  return typeof func === 'function' ? { func } : func
}
`
}
