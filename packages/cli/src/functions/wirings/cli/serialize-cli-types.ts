/**
 * Generates type definitions for CLI wirings
 */
export const serializeCLITypes = (
  functionTypesImportPath: string,
  userSessionTypeImport: string,
  userSessionTypeName: string,
  singletonServicesTypeImport: string,
  singletonServicesTypeName: string
) => {
  return `/**
 * This file was generated by the @pikku/cli
 * CLI-specific type definitions for tree-shaking optimization
 */

import { CoreCLI, wireCLI as wireCLICore, CorePikkuCLIRender } from '@pikku/core'
import type { PikkuFunction, PikkuFunctionSessionless, PikkuMiddleware } from '${functionTypesImportPath}'
${userSessionTypeImport}
${singletonServicesTypeImport}

${singletonServicesTypeName !== 'SingletonServices' ? `type SingletonServices = ${singletonServicesTypeName}` : ''}
${userSessionTypeName !== 'Session' ? `type Session = ${userSessionTypeName}` : ''}

/**
 * Type-safe CLI renderer definition that can access your application's services.
 * Use this to define custom renderers for CLI command output.
 *
 * @template Data - The output data type from the CLI command
 * @template RequiredServices - The services required for this renderer
 */
type PikkuCLIRender<Data, RequiredServices extends SingletonServices = SingletonServices> = CorePikkuCLIRender<Data, RequiredServices, Session>

/**
 * Extract input parameters from a Pikku function type
 */
type ExtractFunctionInput<Func> = Func extends PikkuFunctionSessionless<infer Input, any>
  ? Input
  : Func extends PikkuFunction<infer Input, any>
    ? Input
    : never

/**
 * Extract output type from a Pikku function type
 */
type ExtractFunctionOutput<Func> = Func extends PikkuFunctionSessionless<any, infer Output>
  ? Output
  : Func extends PikkuFunction<any, infer Output>
    ? Output
    : never

/**
 * CLI command configuration that infers options from function input type
 */
type CLICommandConfig<Func> = {
  command: string
  func: Func
  description?: string
  render?: PikkuCLIRender<ExtractFunctionOutput<Func>>
  options?: Partial<Record<keyof ExtractFunctionInput<Func>, {
    description?: string
    short?: string
    default?: ExtractFunctionInput<Func>[keyof ExtractFunctionInput<Func>]
  }>> & Record<string, {
    description?: string
    short?: string
    default?: any
  }>
  subcommands?: Record<string, any>
  auth?: boolean
  permissions?: any[]
}

/**
 * Result type for CLI command configuration
 */
type CLICommandResult<Func> = CLICommandConfig<Func>

/**
 * Type definition for CLI applications with commands and global options.
 *
 * @template Commands - Type describing the command structure
 * @template GlobalOptions - Type for global CLI options
 */
type CLIWiring<Commands, GlobalOptions> = CoreCLI<Commands, GlobalOptions, PikkuMiddleware, PikkuCLIRender<any>>

/**
 * Registers a CLI application with the Pikku framework.
 * Creates command-line interfaces with type-safe commands and options.
 *
 * @template Commands - Type describing the command structure
 * @template GlobalOptions - Type for global CLI options
 * @param cli - CLI definition with program name, commands, and global options
 */
export const wireCLI = <Commands, GlobalOptions>(
  cli: CLIWiring<Commands, GlobalOptions>
) => {
  wireCLICore(cli as any)
}

/**
 * Creates a CLI command definition with automatic option inference from the function's input type.
 * This allows TypeScript to automatically derive CLI options from the function signature.
 * The unwrapping of pikku function wrappers is handled by the core CLI runner.
 *
 * @template Func - The function type to create a CLI command for
 * @param config - CLI command configuration
 * @returns CLI command configuration with inferred types
 */
export const pikkuCLICommand = <Func extends (...args: any[]) => any>(
  config: CLICommandConfig<Func>
): CLICommandResult<Func> => {
  return config as any
}
`
}
