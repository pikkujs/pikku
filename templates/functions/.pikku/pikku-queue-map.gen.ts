/**
 * This file was generated by the @pikku/cli
 */
/**
 * This provides the structure needed for typescript to be aware of Queue workers and their input/output types
 */

// Custom types are those that are defined directly within generics
// or are broken into simpler types
export type OnConnectInput = 'hello!'
export type AuthenticateInput = { token: string; userId: string }
export type AuthenticateOutput = { authResult: boolean; action: 'auth' }
export type SubscribeInput = { name: string }
export type UnsubscribeInput = { name: string }
export type EmitMessageInput = { name: string }
export type EmitMessageOutput =
  | { timestamp: string; from: string }
  | { message: string }
export type OnMessageInput = 'hello'
export type OnMessageOutput = 'hey'
export type ProgressiveEnhancementExampleOutput = {
  state: 'initial' | 'pending' | 'done'
}
export type TimeSinceOpenedOutput = { count: number }
export type QueueWorkerInput = { message: string; fail: boolean }
export type QueueWorkerOutput = { result: string }
export type RpcTestInput = { in: number }

import type { QueueJob } from '@pikku/core/queue'

interface QueueHandler<I, O> {
  input: I
  output: O
}

export type QueueMap = {
  readonly 'hello-world-queue': QueueHandler<
    QueueWorkerInput,
    QueueWorkerOutput
  >
}

type QueueAdd = <Name extends keyof QueueMap>(
  name: Name,
  data: QueueMap[Name]['input'],
  options?: {
    priority?: number
    delay?: number
    attempts?: number
    removeOnComplete?: number
    removeOnFail?: number
    jobId?: string
  }
) => Promise<string>

type QueueGetJob = <Name extends keyof QueueMap>(
  name: Name,
  jobId: string
) => Promise<QueueJob<QueueMap[Name]['input'], QueueMap[Name]['output']> | null>

export type TypedPikkuQueue = {
  add: QueueAdd
  getJob: QueueGetJob
}
