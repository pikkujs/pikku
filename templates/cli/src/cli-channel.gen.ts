/**
 * This file was generated by @pikku/cli@0.10.0
 */
/**
 * WebSocket channel backend for 'my-cli' CLI commands
 */
import { wireChannel } from '../.pikku/channel/pikku-channel-types.gen.js'
import { greetUser } from '../../functions/src/cli.functions.js'
import { addNumbers } from '../../functions/src/cli.functions.js'
import { subtractNumbers } from '../../functions/src/cli.functions.js'
import { multiplyNumbers } from '../../functions/src/cli.functions.js'
import { divideNumbers } from '../../functions/src/cli.functions.js'
import { createUser } from '../../functions/src/cli.functions.js'
import { listUsers } from '../../functions/src/cli.functions.js'
import { processFile } from '../../functions/src/cli.functions.js'
import { pikkuMiddleware } from '../.pikku/function/pikku-function-types.gen.js'

// Middleware to close the channel after CLI command completes
const cliCloseOnComplete = pikkuMiddleware(
  async (_services, { channel }, next) => {
    try {
      const result = await next()
      // Close the channel after command completes
      channel?.close()
      return result
    } catch (error) {
      // Close the channel even on error
      channel?.close()
      throw error
    }
  }
)

// Wrap CLI command handlers with close middleware
const wrapForCLI = (func: any) => ({
  func,
  middleware: [cliCloseOnComplete],
})

wireChannel({
  name: 'cli',
  route: '/cli',
  auth: false,
  onMessageWiring: {
    command: {
      greet: wrapForCLI(greetUser),
      'calc.add': wrapForCLI(addNumbers),
      'calc.subtract': wrapForCLI(subtractNumbers),
      'calc.multiply': wrapForCLI(multiplyNumbers),
      'calc.divide': wrapForCLI(divideNumbers),
      'user.create': wrapForCLI(createUser),
      'user.list': wrapForCLI(listUsers),
      file: wrapForCLI(processFile),
    },
  },
  tags: ['cli', 'my-cli'],
})
